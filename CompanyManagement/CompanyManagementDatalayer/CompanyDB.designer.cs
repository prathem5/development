#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyManagementDatalayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CompanyDB")]
	public partial class CompanyDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertDepartmentMaster(DepartmentMaster instance);
    partial void UpdateDepartmentMaster(DepartmentMaster instance);
    partial void DeleteDepartmentMaster(DepartmentMaster instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeProjectMap(EmployeeProjectMap instance);
    partial void UpdateEmployeeProjectMap(EmployeeProjectMap instance);
    partial void DeleteEmployeeProjectMap(EmployeeProjectMap instance);
    partial void InsertEmployeeTaskMap(EmployeeTaskMap instance);
    partial void UpdateEmployeeTaskMap(EmployeeTaskMap instance);
    partial void DeleteEmployeeTaskMap(EmployeeTaskMap instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectTaskMap(ProjectTaskMap instance);
    partial void UpdateProjectTaskMap(ProjectTaskMap instance);
    partial void DeleteProjectTaskMap(ProjectTaskMap instance);
    partial void InsertStatusMaster(StatusMaster instance);
    partial void UpdateStatusMaster(StatusMaster instance);
    partial void DeleteStatusMaster(StatusMaster instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTechnologyMaster(TechnologyMaster instance);
    partial void UpdateTechnologyMaster(TechnologyMaster instance);
    partial void DeleteTechnologyMaster(TechnologyMaster instance);
    partial void InsertTechProjectMap(TechProjectMap instance);
    partial void UpdateTechProjectMap(TechProjectMap instance);
    partial void DeleteTechProjectMap(TechProjectMap instance);
    partial void InsertTechTaskMap(TechTaskMap instance);
    partial void UpdateTechTaskMap(TechTaskMap instance);
    partial void DeleteTechTaskMap(TechTaskMap instance);
    #endregion
		
		public CompanyDBDataContext() : 
				base(global::CompanyManagementDatalayer.Properties.Settings.Default.CompanyDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this.GetTable<DepartmentMaster>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeProjectMap> EmployeeProjectMaps
		{
			get
			{
				return this.GetTable<EmployeeProjectMap>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeTaskMap> EmployeeTaskMaps
		{
			get
			{
				return this.GetTable<EmployeeTaskMap>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTaskMap> ProjectTaskMaps
		{
			get
			{
				return this.GetTable<ProjectTaskMap>();
			}
		}
		
		public System.Data.Linq.Table<StatusMaster> StatusMasters
		{
			get
			{
				return this.GetTable<StatusMaster>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyMaster> TechnologyMasters
		{
			get
			{
				return this.GetTable<TechnologyMaster>();
			}
		}
		
		public System.Data.Linq.Table<TechProjectMap> TechProjectMaps
		{
			get
			{
				return this.GetTable<TechProjectMap>();
			}
		}
		
		public System.Data.Linq.Table<TechTaskMap> TechTaskMaps
		{
			get
			{
				return this.GetTable<TechTaskMap>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientAddress;
		
		private System.Nullable<int> _CompanyID;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientAddressChanging(string value);
    partial void OnClientAddressChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientAddress", DbType="VarChar(50)")]
		public string ClientAddress
		{
			get
			{
				return this._ClientAddress;
			}
			set
			{
				if ((this._ClientAddress != value))
				{
					this.OnClientAddressChanging(value);
					this.SendPropertyChanging();
					this._ClientAddress = value;
					this.SendPropertyChanged("ClientAddress");
					this.OnClientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _CompanyName;
		
		private string _CompanyAddress;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<DepartmentMaster> _DepartmentMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    #endregion
		
		public Company()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._DepartmentMasters = new EntitySet<DepartmentMaster>(new Action<DepartmentMaster>(this.attach_DepartmentMasters), new Action<DepartmentMaster>(this.detach_DepartmentMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAddress", DbType="VarChar(50)")]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Client", Storage="_Clients", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DepartmentMaster", Storage="_DepartmentMasters", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this._DepartmentMasters;
			}
			set
			{
				this._DepartmentMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentMaster")]
	public partial class DepartmentMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentName;
		
		private int _CompanyID;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public DepartmentMaster()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DepartmentMaster", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DepartmentMasters.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DepartmentMasters.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		private string _EmployeeAddress;
		
		private int _EmployeeSalary;
		
		private System.TimeSpan _EmployeeJoined;
		
		private System.Nullable<System.TimeSpan> _EmployeeLeaved;
		
		private int _DepartmentID;
		
		private EntityRef<Employee> _Employee2;
		
		private EntitySet<EmployeeProjectMap> _EmployeeProjectMaps;
		
		private EntitySet<EmployeeTaskMap> _EmployeeTaskMaps;
		
		private EntityRef<DepartmentMaster> _DepartmentMaster;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeeAddressChanging(string value);
    partial void OnEmployeeAddressChanged();
    partial void OnEmployeeSalaryChanging(int value);
    partial void OnEmployeeSalaryChanged();
    partial void OnEmployeeJoinedChanging(System.TimeSpan value);
    partial void OnEmployeeJoinedChanged();
    partial void OnEmployeeLeavedChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEmployeeLeavedChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Employee()
		{
			this._Employee2 = default(EntityRef<Employee>);
			this._EmployeeProjectMaps = new EntitySet<EmployeeProjectMap>(new Action<EmployeeProjectMap>(this.attach_EmployeeProjectMaps), new Action<EmployeeProjectMap>(this.detach_EmployeeProjectMaps));
			this._EmployeeTaskMaps = new EntitySet<EmployeeTaskMap>(new Action<EmployeeTaskMap>(this.attach_EmployeeTaskMaps), new Action<EmployeeTaskMap>(this.detach_EmployeeTaskMaps));
			this._DepartmentMaster = default(EntityRef<DepartmentMaster>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EmpoyeeAddress", Storage="_EmployeeAddress", DbType="VarChar(50)")]
		public string EmployeeAddress
		{
			get
			{
				return this._EmployeeAddress;
			}
			set
			{
				if ((this._EmployeeAddress != value))
				{
					this.OnEmployeeAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAddress = value;
					this.SendPropertyChanged("EmployeeAddress");
					this.OnEmployeeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSalary", DbType="Int NOT NULL")]
		public int EmployeeSalary
		{
			get
			{
				return this._EmployeeSalary;
			}
			set
			{
				if ((this._EmployeeSalary != value))
				{
					this.OnEmployeeSalaryChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSalary = value;
					this.SendPropertyChanged("EmployeeSalary");
					this.OnEmployeeSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeJoined", DbType="Time NOT NULL")]
		public System.TimeSpan EmployeeJoined
		{
			get
			{
				return this._EmployeeJoined;
			}
			set
			{
				if ((this._EmployeeJoined != value))
				{
					this.OnEmployeeJoinedChanging(value);
					this.SendPropertyChanging();
					this._EmployeeJoined = value;
					this.SendPropertyChanged("EmployeeJoined");
					this.OnEmployeeJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeLeaved", DbType="Time")]
		public System.Nullable<System.TimeSpan> EmployeeLeaved
		{
			get
			{
				return this._EmployeeLeaved;
			}
			set
			{
				if ((this._EmployeeLeaved != value))
				{
					this.OnEmployeeLeavedChanging(value);
					this.SendPropertyChanging();
					this._EmployeeLeaved = value;
					this.SendPropertyChanged("EmployeeLeaved");
					this.OnEmployeeLeavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DepartmentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee2", ThisKey="EmployeeID", OtherKey="EmployeeID", IsUnique=true, IsForeignKey=false)]
		public Employee Employee2
		{
			get
			{
				return this._Employee2.Entity;
			}
			set
			{
				Employee previousValue = this._Employee2.Entity;
				if (((previousValue != value) 
							|| (this._Employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee2.Entity = null;
						previousValue.Employee1 = null;
					}
					this._Employee2.Entity = value;
					if ((value != null))
					{
						value.Employee1 = this;
					}
					this.SendPropertyChanged("Employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMap", Storage="_EmployeeProjectMaps", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeProjectMap> EmployeeProjectMaps
		{
			get
			{
				return this._EmployeeProjectMaps;
			}
			set
			{
				this._EmployeeProjectMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTaskMap", Storage="_EmployeeTaskMaps", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeTaskMap> EmployeeTaskMaps
		{
			get
			{
				return this._EmployeeTaskMaps;
			}
			set
			{
				this._EmployeeTaskMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_DepartmentMaster", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public DepartmentMaster DepartmentMaster
		{
			get
			{
				return this._DepartmentMaster.Entity;
			}
			set
			{
				DepartmentMaster previousValue = this._DepartmentMaster.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentMaster.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._DepartmentMaster.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("DepartmentMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee1", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Employee2 = null;
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Employee2 = this;
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeTaskMaps(EmployeeTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeTaskMaps(EmployeeTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeProjectMap")]
	public partial class EmployeeProjectMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeProjectMapID;
		
		private int _EmployeeID;
		
		private int _ProjectID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeProjectMapIDChanging(int value);
    partial void OnEmployeeProjectMapIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public EmployeeProjectMap()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeProjectMapID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeProjectMapID
		{
			get
			{
				return this._EmployeeProjectMapID;
			}
			set
			{
				if ((this._EmployeeProjectMapID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeProjectMapIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeProjectMapID = value;
					this.SendPropertyChanged("EmployeeProjectMapID");
					this.OnEmployeeProjectMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMap", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeProjectMaps.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMaps.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMap", Storage="_Project", ThisKey="EmployeeProjectMapID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployeeProjectMap = null;
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMap = this;
						this._EmployeeProjectMapID = value.ProjectID;
					}
					else
					{
						this._EmployeeProjectMapID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeTaskMap")]
	public partial class EmployeeTaskMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTaskMapID;
		
		private int _EmployeeID;
		
		private int _TaskID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTaskMapIDChanging(int value);
    partial void OnEmployeeTaskMapIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public EmployeeTaskMap()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTaskMapID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeTaskMapID
		{
			get
			{
				return this._EmployeeTaskMapID;
			}
			set
			{
				if ((this._EmployeeTaskMapID != value))
				{
					this.OnEmployeeTaskMapIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTaskMapID = value;
					this.SendPropertyChanged("EmployeeTaskMapID");
					this.OnEmployeeTaskMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTaskMap", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeTaskMaps.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeTaskMaps.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTaskMap", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.EmployeeTaskMaps.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.EmployeeTaskMaps.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private int _ProjectBudget;
		
		private int _ClientID;
		
		private int _StatusID;
		
		private EntityRef<EmployeeProjectMap> _EmployeeProjectMap;
		
		private EntitySet<ProjectTaskMap> _ProjectTaskMaps;
		
		private EntitySet<TechProjectMap> _TechProjectMaps;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectBudgetChanging(int value);
    partial void OnProjectBudgetChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public Project()
		{
			this._EmployeeProjectMap = default(EntityRef<EmployeeProjectMap>);
			this._ProjectTaskMaps = new EntitySet<ProjectTaskMap>(new Action<ProjectTaskMap>(this.attach_ProjectTaskMaps), new Action<ProjectTaskMap>(this.detach_ProjectTaskMaps));
			this._TechProjectMaps = new EntitySet<TechProjectMap>(new Action<TechProjectMap>(this.attach_TechProjectMaps), new Action<TechProjectMap>(this.detach_TechProjectMaps));
			this._Client = default(EntityRef<Client>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectBudget", DbType="Int NOT NULL")]
		public int ProjectBudget
		{
			get
			{
				return this._ProjectBudget;
			}
			set
			{
				if ((this._ProjectBudget != value))
				{
					this.OnProjectBudgetChanging(value);
					this.SendPropertyChanging();
					this._ProjectBudget = value;
					this.SendPropertyChanged("ProjectBudget");
					this.OnProjectBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMap", Storage="_EmployeeProjectMap", ThisKey="ProjectID", OtherKey="EmployeeProjectMapID", IsUnique=true, IsForeignKey=false)]
		public EmployeeProjectMap EmployeeProjectMap
		{
			get
			{
				return this._EmployeeProjectMap.Entity;
			}
			set
			{
				EmployeeProjectMap previousValue = this._EmployeeProjectMap.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeProjectMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeProjectMap.Entity = null;
						previousValue.Project = null;
					}
					this._EmployeeProjectMap.Entity = value;
					if ((value != null))
					{
						value.Project = this;
					}
					this.SendPropertyChanged("EmployeeProjectMap");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskMap", Storage="_ProjectTaskMaps", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectTaskMap> ProjectTaskMaps
		{
			get
			{
				return this._ProjectTaskMaps;
			}
			set
			{
				this._ProjectTaskMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TechProjectMap", Storage="_TechProjectMaps", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<TechProjectMap> TechProjectMaps
		{
			get
			{
				return this._TechProjectMaps;
			}
			set
			{
				this._TechProjectMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_StatusMaster", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTaskMaps(ProjectTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTaskMaps(ProjectTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TechProjectMaps(TechProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TechProjectMaps(TechProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTaskMap")]
	public partial class ProjectTaskMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTaskMapID;
		
		private int _ProjectID;
		
		private int _TaskID;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTaskMapIDChanging(int value);
    partial void OnProjectTaskMapIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public ProjectTaskMap()
		{
			this._Project = default(EntityRef<Project>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTaskMapID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectTaskMapID
		{
			get
			{
				return this._ProjectTaskMapID;
			}
			set
			{
				if ((this._ProjectTaskMapID != value))
				{
					this.OnProjectTaskMapIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectTaskMapID = value;
					this.SendPropertyChanged("ProjectTaskMapID");
					this.OnProjectTaskMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskMap", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTaskMaps.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskMaps.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskMap", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.ProjectTaskMaps.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskMaps.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusMaster")]
	public partial class StatusMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public StatusMaster()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_Projects", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Task", Storage="_Tasks", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private int _StatusID;
		
		private EntitySet<EmployeeTaskMap> _EmployeeTaskMaps;
		
		private EntitySet<ProjectTaskMap> _ProjectTaskMaps;
		
		private EntitySet<TechTaskMap> _TechTaskMaps;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public Task()
		{
			this._EmployeeTaskMaps = new EntitySet<EmployeeTaskMap>(new Action<EmployeeTaskMap>(this.attach_EmployeeTaskMaps), new Action<EmployeeTaskMap>(this.detach_EmployeeTaskMaps));
			this._ProjectTaskMaps = new EntitySet<ProjectTaskMap>(new Action<ProjectTaskMap>(this.attach_ProjectTaskMaps), new Action<ProjectTaskMap>(this.detach_ProjectTaskMaps));
			this._TechTaskMaps = new EntitySet<TechTaskMap>(new Action<TechTaskMap>(this.attach_TechTaskMaps), new Action<TechTaskMap>(this.detach_TechTaskMaps));
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTaskMap", Storage="_EmployeeTaskMaps", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<EmployeeTaskMap> EmployeeTaskMaps
		{
			get
			{
				return this._EmployeeTaskMaps;
			}
			set
			{
				this._EmployeeTaskMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskMap", Storage="_ProjectTaskMaps", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<ProjectTaskMap> ProjectTaskMaps
		{
			get
			{
				return this._ProjectTaskMaps;
			}
			set
			{
				this._ProjectTaskMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TechTaskMap", Storage="_TechTaskMaps", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TechTaskMap> TechTaskMaps
		{
			get
			{
				return this._TechTaskMaps;
			}
			set
			{
				this._TechTaskMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Task", Storage="_StatusMaster", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTaskMaps(EmployeeTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_EmployeeTaskMaps(EmployeeTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_ProjectTaskMaps(ProjectTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_ProjectTaskMaps(ProjectTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TechTaskMaps(TechTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TechTaskMaps(TechTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyMaster")]
	public partial class TechnologyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechID;
		
		private string _TechName;
		
		private int _TechCost;
		
		private EntitySet<TechProjectMap> _TechProjectMaps;
		
		private EntitySet<TechTaskMap> _TechTaskMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnTechNameChanging(string value);
    partial void OnTechNameChanged();
    partial void OnTechCostChanging(int value);
    partial void OnTechCostChanged();
    #endregion
		
		public TechnologyMaster()
		{
			this._TechProjectMaps = new EntitySet<TechProjectMap>(new Action<TechProjectMap>(this.attach_TechProjectMaps), new Action<TechProjectMap>(this.detach_TechProjectMaps));
			this._TechTaskMaps = new EntitySet<TechTaskMap>(new Action<TechTaskMap>(this.attach_TechTaskMaps), new Action<TechTaskMap>(this.detach_TechTaskMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TechName
		{
			get
			{
				return this._TechName;
			}
			set
			{
				if ((this._TechName != value))
				{
					this.OnTechNameChanging(value);
					this.SendPropertyChanging();
					this._TechName = value;
					this.SendPropertyChanged("TechName");
					this.OnTechNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechCost", DbType="Int NOT NULL")]
		public int TechCost
		{
			get
			{
				return this._TechCost;
			}
			set
			{
				if ((this._TechCost != value))
				{
					this.OnTechCostChanging(value);
					this.SendPropertyChanging();
					this._TechCost = value;
					this.SendPropertyChanged("TechCost");
					this.OnTechCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechProjectMap", Storage="_TechProjectMaps", ThisKey="TechID", OtherKey="TechID")]
		public EntitySet<TechProjectMap> TechProjectMaps
		{
			get
			{
				return this._TechProjectMaps;
			}
			set
			{
				this._TechProjectMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechTaskMap", Storage="_TechTaskMaps", ThisKey="TechID", OtherKey="TechID")]
		public EntitySet<TechTaskMap> TechTaskMaps
		{
			get
			{
				return this._TechTaskMaps;
			}
			set
			{
				this._TechTaskMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TechProjectMaps(TechProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = this;
		}
		
		private void detach_TechProjectMaps(TechProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = null;
		}
		
		private void attach_TechTaskMaps(TechTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = this;
		}
		
		private void detach_TechTaskMaps(TechTaskMap entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechProjectMap")]
	public partial class TechProjectMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechProjectMapID;
		
		private int _TechID;
		
		private int _ProjectID;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnologyMaster> _TechnologyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechProjectMapIDChanging(int value);
    partial void OnTechProjectMapIDChanged();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public TechProjectMap()
		{
			this._Project = default(EntityRef<Project>);
			this._TechnologyMaster = default(EntityRef<TechnologyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechProjectMapID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TechProjectMapID
		{
			get
			{
				return this._TechProjectMapID;
			}
			set
			{
				if ((this._TechProjectMapID != value))
				{
					this.OnTechProjectMapIDChanging(value);
					this.SendPropertyChanging();
					this._TechProjectMapID = value;
					this.SendPropertyChanged("TechProjectMapID");
					this.OnTechProjectMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechID", DbType="Int NOT NULL")]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._TechnologyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TechProjectMap", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TechProjectMaps.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TechProjectMaps.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechProjectMap", Storage="_TechnologyMaster", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true)]
		public TechnologyMaster TechnologyMaster
		{
			get
			{
				return this._TechnologyMaster.Entity;
			}
			set
			{
				TechnologyMaster previousValue = this._TechnologyMaster.Entity;
				if (((previousValue != value) 
							|| (this._TechnologyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnologyMaster.Entity = null;
						previousValue.TechProjectMaps.Remove(this);
					}
					this._TechnologyMaster.Entity = value;
					if ((value != null))
					{
						value.TechProjectMaps.Add(this);
						this._TechID = value.TechID;
					}
					else
					{
						this._TechID = default(int);
					}
					this.SendPropertyChanged("TechnologyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechTaskMap")]
	public partial class TechTaskMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechTaskMapID;
		
		private int _TechID;
		
		private int _TaskID;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<TechnologyMaster> _TechnologyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechTaskMapIDChanging(int value);
    partial void OnTechTaskMapIDChanged();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TechTaskMap()
		{
			this._Task = default(EntityRef<Task>);
			this._TechnologyMaster = default(EntityRef<TechnologyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechTaskMapID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TechTaskMapID
		{
			get
			{
				return this._TechTaskMapID;
			}
			set
			{
				if ((this._TechTaskMapID != value))
				{
					this.OnTechTaskMapIDChanging(value);
					this.SendPropertyChanging();
					this._TechTaskMapID = value;
					this.SendPropertyChanged("TechTaskMapID");
					this.OnTechTaskMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechID", DbType="Int NOT NULL")]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._TechnologyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TechTaskMap", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TechTaskMaps.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TechTaskMaps.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechTaskMap", Storage="_TechnologyMaster", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true)]
		public TechnologyMaster TechnologyMaster
		{
			get
			{
				return this._TechnologyMaster.Entity;
			}
			set
			{
				TechnologyMaster previousValue = this._TechnologyMaster.Entity;
				if (((previousValue != value) 
							|| (this._TechnologyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnologyMaster.Entity = null;
						previousValue.TechTaskMaps.Remove(this);
					}
					this._TechnologyMaster.Entity = value;
					if ((value != null))
					{
						value.TechTaskMaps.Add(this);
						this._TechID = value.TechID;
					}
					else
					{
						this._TechID = default(int);
					}
					this.SendPropertyChanged("TechnologyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
